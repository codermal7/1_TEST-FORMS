const Web3 = require("web3");
const web3 = new Web3(
  "https://distinguished-alien-frost.ethereum-sepolia.discover.quiknode.pro/51eca177453d1a718fc74ff5ad7614a93fa11397/"
);

const abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "_userId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenHolder",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getTokenHolderData",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "holderToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerofcontract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "standard",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenHolderInfos",
    outputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_totalToken",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_tokenHolder",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const contractAddress = "0xd9145CCE52D386f254917e481eB44e9943F39138";

const mtokenContract = new web3.eth.Contract(contractAbi, contractAddress);

// Function to get the name of the token
async function getName() {
  return await mtokenContract.methods.name().call();
}

// Function to get the symbol of the token
async function getSymbol() {
  return await mtokenContract.methods.symbol().call();
}

// Function to get the total supply of the token
async function getTotalSupply() {
  return await mtokenContract.methods.totalSupply().call();
}

// Function to get the balance of an address
async function getBalance(address) {
  return await mtokenContract.methods.balanceOf(address).call();
}

// Function to transfer tokens
async function transfer(toAddress, amount) {
  const accounts = await web3.eth.getAccounts();
  return await mtokenContract.methods
    .transfer(toAddress, amount)
    .send({ from: accounts[0] });
}

// Function to approve a spender to spend a certain amount of tokens
async function approve(spenderAddress, amount) {
  const accounts = await web3.eth.getAccounts();
  return await mtokenContract.methods
    .approve(spenderAddress, amount)
    .send({ from: accounts[0] });
}

// Function to transfer tokens from one address to another, using the allowance mechanism
async function transferFrom(fromAddress, toAddress, amount) {
  const accounts = await web3.eth.getAccounts();
  return await mtokenContract.methods
    .transferFrom(fromAddress, toAddress, amount)
    .send({ from: accounts[0] });
}

// Function to get the token holder data of an address
async function getTokenHolderData(address) {
  return await mtokenContract.methods.getTokenHolderData(address).call();
}

// Function to get an array of all token holders
async function getTokenHolders() {
  return await mtokenContract.methods.getTokenHolder().call();
}
async function getMtokenInfo() {
    const address = document.getElementById("address").value;
    const contractAddress = "CONTRACT_ADDRESS"; // Replace with the actual contract address
    const abi = ABI; // Replace with the actual ABI

    const web3 = new Web3(Web3.givenProvider || "http://localhost:8545");
    const contract = new web3.eth.Contract(abi, contractAddress);

    const [name, symbol, totalSupply] = await Promise.all([
        contract.methods.name().call(),
        contract.methods.symbol().call(),
        contract.methods.totalSupply().call(),
    ]);

    const [tokenId, to, from, totalToken, tokenHolder] = await contract.methods.getTokenHolderData(address).call();

    const holderList = await contract.methods.getTokenHolder().call();

    const tokenInfoDiv = document.getElementById("token-info");
    tokenInfoDiv.innerHTML = `
        <h2>Token Information</h2>
        <p>Name: ${name}</p>
        <p>Symbol: ${symbol}</p>
        <p>Total Supply: ${totalSupply}</p>
        <p>Token ID: ${tokenId}</p>
        <p>To: ${to}</p>
        <p>From: ${from}</p>
        <p>Total Token: ${totalToken}</p>
        <p>Token Holder: ${tokenHolder}</p>
    `;

    const tokenHoldersDiv = document.getElementById("token-holders");
    tokenHoldersDiv.innerHTML = `
        <h2>Token Holders</h2>
        <ul>
            ${holderList.map((holder) => `<li>${holder}</li>`).join("")}
        </ul>
    `;
}